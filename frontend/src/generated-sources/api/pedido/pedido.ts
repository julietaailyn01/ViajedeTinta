/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * WebApi
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import {
  useCallback
} from 'react';

import type {
  Pedido
} from '.././model';

import { useCustomInstance } from '.././useCustomInstance';
import type { ErrorType , BodyType } from '.././useCustomInstance';




export const useGetApiPedidoHook = () => {
        const getApiPedido = useCustomInstance<Pedido[]>();

        return useCallback((
    
 signal?: AbortSignal
) => {
        return getApiPedido(
          {url: `/api/Pedido`, method: 'GET', signal
    },
          );
        }, [getApiPedido])
      }
    

export const getGetApiPedidoQueryKey = () => {
    return [`/api/Pedido`] as const;
    }

    
export const useGetApiPedidoQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useGetApiPedidoHook>>>, TError = ErrorType<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiPedidoHook>>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiPedidoQueryKey();

  const getApiPedido =  useGetApiPedidoHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetApiPedidoHook>>>> = ({ signal }) => getApiPedido(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiPedidoHook>>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiPedidoQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetApiPedidoHook>>>>
export type GetApiPedidoQueryError = ErrorType<unknown>


export function useGetApiPedido<TData = Awaited<ReturnType<ReturnType<typeof useGetApiPedidoHook>>>, TError = ErrorType<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiPedidoHook>>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetApiPedidoHook>>>,
          TError,
          Awaited<ReturnType<ReturnType<typeof useGetApiPedidoHook>>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiPedido<TData = Awaited<ReturnType<ReturnType<typeof useGetApiPedidoHook>>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiPedidoHook>>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetApiPedidoHook>>>,
          TError,
          Awaited<ReturnType<ReturnType<typeof useGetApiPedidoHook>>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiPedido<TData = Awaited<ReturnType<ReturnType<typeof useGetApiPedidoHook>>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiPedidoHook>>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiPedido<TData = Awaited<ReturnType<ReturnType<typeof useGetApiPedidoHook>>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiPedidoHook>>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = useGetApiPedidoQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const usePostApiPedidoHook = () => {
        const postApiPedido = useCustomInstance<Pedido>();

        return useCallback((
    pedido: BodyType<Pedido>,
 signal?: AbortSignal
) => {
        return postApiPedido(
          {url: `/api/Pedido`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: pedido, signal
    },
          );
        }, [postApiPedido])
      }
    


export const usePostApiPedidoMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiPedidoHook>>>, TError,{data: BodyType<Pedido>}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiPedidoHook>>>, TError,{data: BodyType<Pedido>}, TContext> => {

const mutationKey = ['postApiPedido'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      const postApiPedido =  usePostApiPedidoHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePostApiPedidoHook>>>, {data: BodyType<Pedido>}> = (props) => {
          const {data} = props ?? {};

          return  postApiPedido(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiPedidoMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePostApiPedidoHook>>>>
    export type PostApiPedidoMutationBody = BodyType<Pedido>
    export type PostApiPedidoMutationError = ErrorType<unknown>

    export const usePostApiPedido = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiPedidoHook>>>, TError,{data: BodyType<Pedido>}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<ReturnType<typeof usePostApiPedidoHook>>>,
        TError,
        {data: BodyType<Pedido>},
        TContext
      > => {

      const mutationOptions = usePostApiPedidoMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const usePutApiPedidoIdHook = () => {
        const putApiPedidoId = useCustomInstance<void>();

        return useCallback((
    id: number,
    putApiPedidoIdBody: BodyType<string>,
 ) => {
        return putApiPedidoId(
          {url: `/api/Pedido/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: putApiPedidoIdBody
    },
          );
        }, [putApiPedidoId])
      }
    


export const usePutApiPedidoIdMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePutApiPedidoIdHook>>>, TError,{id: number;data: BodyType<string>}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePutApiPedidoIdHook>>>, TError,{id: number;data: BodyType<string>}, TContext> => {

const mutationKey = ['putApiPedidoId'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      const putApiPedidoId =  usePutApiPedidoIdHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePutApiPedidoIdHook>>>, {id: number;data: BodyType<string>}> = (props) => {
          const {id,data} = props ?? {};

          return  putApiPedidoId(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutApiPedidoIdMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePutApiPedidoIdHook>>>>
    export type PutApiPedidoIdMutationBody = BodyType<string>
    export type PutApiPedidoIdMutationError = ErrorType<unknown>

    export const usePutApiPedidoId = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePutApiPedidoIdHook>>>, TError,{id: number;data: BodyType<string>}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<ReturnType<typeof usePutApiPedidoIdHook>>>,
        TError,
        {id: number;data: BodyType<string>},
        TContext
      > => {

      const mutationOptions = usePutApiPedidoIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    