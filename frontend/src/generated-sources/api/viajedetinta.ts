/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * WebApi
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  Pedido,
  Personalizacione,
  Producto,
  Usuario
} from './model';





export const getApiPedido = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Pedido[]>> => {
    
    
    return axios.get(
      `/api/Pedido`,options
    );
  }


export const getGetApiPedidoQueryKey = () => {
    return [`/api/Pedido`] as const;
    }

    
export const getGetApiPedidoQueryOptions = <TData = Awaited<ReturnType<typeof getApiPedido>>, TError = AxiosError<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiPedido>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiPedidoQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiPedido>>> = ({ signal }) => getApiPedido({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiPedido>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiPedidoQueryResult = NonNullable<Awaited<ReturnType<typeof getApiPedido>>>
export type GetApiPedidoQueryError = AxiosError<unknown>


export function useGetApiPedido<TData = Awaited<ReturnType<typeof getApiPedido>>, TError = AxiosError<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiPedido>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiPedido>>,
          TError,
          Awaited<ReturnType<typeof getApiPedido>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiPedido<TData = Awaited<ReturnType<typeof getApiPedido>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiPedido>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiPedido>>,
          TError,
          Awaited<ReturnType<typeof getApiPedido>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiPedido<TData = Awaited<ReturnType<typeof getApiPedido>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiPedido>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiPedido<TData = Awaited<ReturnType<typeof getApiPedido>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiPedido>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiPedidoQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const postApiPedido = (
    pedido: Pedido, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Pedido>> => {
    
    
    return axios.post(
      `/api/Pedido`,
      pedido,options
    );
  }



export const getPostApiPedidoMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiPedido>>, TError,{data: Pedido}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiPedido>>, TError,{data: Pedido}, TContext> => {

const mutationKey = ['postApiPedido'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiPedido>>, {data: Pedido}> = (props) => {
          const {data} = props ?? {};

          return  postApiPedido(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiPedidoMutationResult = NonNullable<Awaited<ReturnType<typeof postApiPedido>>>
    export type PostApiPedidoMutationBody = Pedido
    export type PostApiPedidoMutationError = AxiosError<unknown>

    export const usePostApiPedido = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiPedido>>, TError,{data: Pedido}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiPedido>>,
        TError,
        {data: Pedido},
        TContext
      > => {

      const mutationOptions = getPostApiPedidoMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const getApiPersonalizacionItemItemId = (
    itemId: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Personalizacione>> => {
    
    
    return axios.get(
      `/api/Personalizacion/item/${itemId}`,options
    );
  }


export const getGetApiPersonalizacionItemItemIdQueryKey = (itemId: number,) => {
    return [`/api/Personalizacion/item/${itemId}`] as const;
    }

    
export const getGetApiPersonalizacionItemItemIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiPersonalizacionItemItemId>>, TError = AxiosError<unknown>>(itemId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiPersonalizacionItemItemId>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiPersonalizacionItemItemIdQueryKey(itemId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiPersonalizacionItemItemId>>> = ({ signal }) => getApiPersonalizacionItemItemId(itemId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(itemId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiPersonalizacionItemItemId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiPersonalizacionItemItemIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiPersonalizacionItemItemId>>>
export type GetApiPersonalizacionItemItemIdQueryError = AxiosError<unknown>


export function useGetApiPersonalizacionItemItemId<TData = Awaited<ReturnType<typeof getApiPersonalizacionItemItemId>>, TError = AxiosError<unknown>>(
 itemId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiPersonalizacionItemItemId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiPersonalizacionItemItemId>>,
          TError,
          Awaited<ReturnType<typeof getApiPersonalizacionItemItemId>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiPersonalizacionItemItemId<TData = Awaited<ReturnType<typeof getApiPersonalizacionItemItemId>>, TError = AxiosError<unknown>>(
 itemId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiPersonalizacionItemItemId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiPersonalizacionItemItemId>>,
          TError,
          Awaited<ReturnType<typeof getApiPersonalizacionItemItemId>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiPersonalizacionItemItemId<TData = Awaited<ReturnType<typeof getApiPersonalizacionItemItemId>>, TError = AxiosError<unknown>>(
 itemId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiPersonalizacionItemItemId>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiPersonalizacionItemItemId<TData = Awaited<ReturnType<typeof getApiPersonalizacionItemItemId>>, TError = AxiosError<unknown>>(
 itemId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiPersonalizacionItemItemId>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiPersonalizacionItemItemIdQueryOptions(itemId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const postApiPersonalizacion = (
    personalizacione: Personalizacione, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Personalizacione>> => {
    
    
    return axios.post(
      `/api/Personalizacion`,
      personalizacione,options
    );
  }



export const getPostApiPersonalizacionMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiPersonalizacion>>, TError,{data: Personalizacione}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiPersonalizacion>>, TError,{data: Personalizacione}, TContext> => {

const mutationKey = ['postApiPersonalizacion'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiPersonalizacion>>, {data: Personalizacione}> = (props) => {
          const {data} = props ?? {};

          return  postApiPersonalizacion(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiPersonalizacionMutationResult = NonNullable<Awaited<ReturnType<typeof postApiPersonalizacion>>>
    export type PostApiPersonalizacionMutationBody = Personalizacione
    export type PostApiPersonalizacionMutationError = AxiosError<unknown>

    export const usePostApiPersonalizacion = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiPersonalizacion>>, TError,{data: Personalizacione}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiPersonalizacion>>,
        TError,
        {data: Personalizacione},
        TContext
      > => {

      const mutationOptions = getPostApiPersonalizacionMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const getApiProduct = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Producto[]>> => {
    
    
    return axios.get(
      `/api/Product`,options
    );
  }


export const getGetApiProductQueryKey = () => {
    return [`/api/Product`] as const;
    }

    
export const getGetApiProductQueryOptions = <TData = Awaited<ReturnType<typeof getApiProduct>>, TError = AxiosError<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiProduct>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiProductQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiProduct>>> = ({ signal }) => getApiProduct({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiProduct>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiProductQueryResult = NonNullable<Awaited<ReturnType<typeof getApiProduct>>>
export type GetApiProductQueryError = AxiosError<unknown>


export function useGetApiProduct<TData = Awaited<ReturnType<typeof getApiProduct>>, TError = AxiosError<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiProduct>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiProduct>>,
          TError,
          Awaited<ReturnType<typeof getApiProduct>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiProduct<TData = Awaited<ReturnType<typeof getApiProduct>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiProduct>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiProduct>>,
          TError,
          Awaited<ReturnType<typeof getApiProduct>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiProduct<TData = Awaited<ReturnType<typeof getApiProduct>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiProduct>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiProduct<TData = Awaited<ReturnType<typeof getApiProduct>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiProduct>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiProductQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const postApiProduct = (
    producto: Producto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Producto>> => {
    
    
    return axios.post(
      `/api/Product`,
      producto,options
    );
  }



export const getPostApiProductMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiProduct>>, TError,{data: Producto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiProduct>>, TError,{data: Producto}, TContext> => {

const mutationKey = ['postApiProduct'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiProduct>>, {data: Producto}> = (props) => {
          const {data} = props ?? {};

          return  postApiProduct(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiProductMutationResult = NonNullable<Awaited<ReturnType<typeof postApiProduct>>>
    export type PostApiProductMutationBody = Producto
    export type PostApiProductMutationError = AxiosError<unknown>

    export const usePostApiProduct = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiProduct>>, TError,{data: Producto}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiProduct>>,
        TError,
        {data: Producto},
        TContext
      > => {

      const mutationOptions = getPostApiProductMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const getApiProductId = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Producto>> => {
    
    
    return axios.get(
      `/api/Product/${id}`,options
    );
  }


export const getGetApiProductIdQueryKey = (id: number,) => {
    return [`/api/Product/${id}`] as const;
    }

    
export const getGetApiProductIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiProductId>>, TError = AxiosError<unknown>>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiProductId>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiProductIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiProductId>>> = ({ signal }) => getApiProductId(id, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiProductId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiProductIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiProductId>>>
export type GetApiProductIdQueryError = AxiosError<unknown>


export function useGetApiProductId<TData = Awaited<ReturnType<typeof getApiProductId>>, TError = AxiosError<unknown>>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiProductId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiProductId>>,
          TError,
          Awaited<ReturnType<typeof getApiProductId>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiProductId<TData = Awaited<ReturnType<typeof getApiProductId>>, TError = AxiosError<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiProductId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiProductId>>,
          TError,
          Awaited<ReturnType<typeof getApiProductId>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiProductId<TData = Awaited<ReturnType<typeof getApiProductId>>, TError = AxiosError<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiProductId>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiProductId<TData = Awaited<ReturnType<typeof getApiProductId>>, TError = AxiosError<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiProductId>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiProductIdQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getApiUsuario = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Usuario[]>> => {
    
    
    return axios.get(
      `/api/Usuario`,options
    );
  }


export const getGetApiUsuarioQueryKey = () => {
    return [`/api/Usuario`] as const;
    }

    
export const getGetApiUsuarioQueryOptions = <TData = Awaited<ReturnType<typeof getApiUsuario>>, TError = AxiosError<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsuario>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiUsuarioQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiUsuario>>> = ({ signal }) => getApiUsuario({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiUsuario>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiUsuarioQueryResult = NonNullable<Awaited<ReturnType<typeof getApiUsuario>>>
export type GetApiUsuarioQueryError = AxiosError<unknown>


export function useGetApiUsuario<TData = Awaited<ReturnType<typeof getApiUsuario>>, TError = AxiosError<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsuario>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiUsuario>>,
          TError,
          Awaited<ReturnType<typeof getApiUsuario>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiUsuario<TData = Awaited<ReturnType<typeof getApiUsuario>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsuario>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiUsuario>>,
          TError,
          Awaited<ReturnType<typeof getApiUsuario>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiUsuario<TData = Awaited<ReturnType<typeof getApiUsuario>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsuario>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiUsuario<TData = Awaited<ReturnType<typeof getApiUsuario>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsuario>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiUsuarioQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const postApiUsuario = (
    usuario: Usuario, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Usuario>> => {
    
    
    return axios.post(
      `/api/Usuario`,
      usuario,options
    );
  }



export const getPostApiUsuarioMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiUsuario>>, TError,{data: Usuario}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiUsuario>>, TError,{data: Usuario}, TContext> => {

const mutationKey = ['postApiUsuario'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiUsuario>>, {data: Usuario}> = (props) => {
          const {data} = props ?? {};

          return  postApiUsuario(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiUsuarioMutationResult = NonNullable<Awaited<ReturnType<typeof postApiUsuario>>>
    export type PostApiUsuarioMutationBody = Usuario
    export type PostApiUsuarioMutationError = AxiosError<unknown>

    export const usePostApiUsuario = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiUsuario>>, TError,{data: Usuario}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiUsuario>>,
        TError,
        {data: Usuario},
        TContext
      > => {

      const mutationOptions = getPostApiUsuarioMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const getApiUsuarioId = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Usuario>> => {
    
    
    return axios.get(
      `/api/Usuario/${id}`,options
    );
  }


export const getGetApiUsuarioIdQueryKey = (id: number,) => {
    return [`/api/Usuario/${id}`] as const;
    }

    
export const getGetApiUsuarioIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiUsuarioId>>, TError = AxiosError<unknown>>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsuarioId>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiUsuarioIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiUsuarioId>>> = ({ signal }) => getApiUsuarioId(id, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiUsuarioId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiUsuarioIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiUsuarioId>>>
export type GetApiUsuarioIdQueryError = AxiosError<unknown>


export function useGetApiUsuarioId<TData = Awaited<ReturnType<typeof getApiUsuarioId>>, TError = AxiosError<unknown>>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsuarioId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiUsuarioId>>,
          TError,
          Awaited<ReturnType<typeof getApiUsuarioId>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiUsuarioId<TData = Awaited<ReturnType<typeof getApiUsuarioId>>, TError = AxiosError<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsuarioId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiUsuarioId>>,
          TError,
          Awaited<ReturnType<typeof getApiUsuarioId>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiUsuarioId<TData = Awaited<ReturnType<typeof getApiUsuarioId>>, TError = AxiosError<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsuarioId>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiUsuarioId<TData = Awaited<ReturnType<typeof getApiUsuarioId>>, TError = AxiosError<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsuarioId>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiUsuarioIdQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




