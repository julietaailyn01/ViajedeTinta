/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * WebApi
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import {
  useCallback
} from 'react';

import type {
  Personalizacione
} from '.././model';

import { useCustomInstance } from '.././useCustomInstance';
import type { ErrorType , BodyType } from '.././useCustomInstance';




export const useGetApiPersonalizacionItemItemIdHook = () => {
        const getApiPersonalizacionItemItemId = useCustomInstance<Personalizacione>();

        return useCallback((
    itemId: number,
 signal?: AbortSignal
) => {
        return getApiPersonalizacionItemItemId(
          {url: `/api/Personalizacion/item/${itemId}`, method: 'GET', signal
    },
          );
        }, [getApiPersonalizacionItemItemId])
      }
    

export const getGetApiPersonalizacionItemItemIdQueryKey = (itemId: number,) => {
    return [`/api/Personalizacion/item/${itemId}`] as const;
    }

    
export const useGetApiPersonalizacionItemItemIdQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useGetApiPersonalizacionItemItemIdHook>>>, TError = ErrorType<unknown>>(itemId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiPersonalizacionItemItemIdHook>>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiPersonalizacionItemItemIdQueryKey(itemId);

  const getApiPersonalizacionItemItemId =  useGetApiPersonalizacionItemItemIdHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetApiPersonalizacionItemItemIdHook>>>> = ({ signal }) => getApiPersonalizacionItemItemId(itemId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(itemId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiPersonalizacionItemItemIdHook>>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiPersonalizacionItemItemIdQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetApiPersonalizacionItemItemIdHook>>>>
export type GetApiPersonalizacionItemItemIdQueryError = ErrorType<unknown>


export function useGetApiPersonalizacionItemItemId<TData = Awaited<ReturnType<ReturnType<typeof useGetApiPersonalizacionItemItemIdHook>>>, TError = ErrorType<unknown>>(
 itemId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiPersonalizacionItemItemIdHook>>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetApiPersonalizacionItemItemIdHook>>>,
          TError,
          Awaited<ReturnType<ReturnType<typeof useGetApiPersonalizacionItemItemIdHook>>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiPersonalizacionItemItemId<TData = Awaited<ReturnType<ReturnType<typeof useGetApiPersonalizacionItemItemIdHook>>>, TError = ErrorType<unknown>>(
 itemId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiPersonalizacionItemItemIdHook>>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetApiPersonalizacionItemItemIdHook>>>,
          TError,
          Awaited<ReturnType<ReturnType<typeof useGetApiPersonalizacionItemItemIdHook>>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiPersonalizacionItemItemId<TData = Awaited<ReturnType<ReturnType<typeof useGetApiPersonalizacionItemItemIdHook>>>, TError = ErrorType<unknown>>(
 itemId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiPersonalizacionItemItemIdHook>>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiPersonalizacionItemItemId<TData = Awaited<ReturnType<ReturnType<typeof useGetApiPersonalizacionItemItemIdHook>>>, TError = ErrorType<unknown>>(
 itemId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiPersonalizacionItemItemIdHook>>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = useGetApiPersonalizacionItemItemIdQueryOptions(itemId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const usePostApiPersonalizacionHook = () => {
        const postApiPersonalizacion = useCustomInstance<Personalizacione>();

        return useCallback((
    personalizacione: BodyType<Personalizacione>,
 signal?: AbortSignal
) => {
        return postApiPersonalizacion(
          {url: `/api/Personalizacion`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: personalizacione, signal
    },
          );
        }, [postApiPersonalizacion])
      }
    


export const usePostApiPersonalizacionMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiPersonalizacionHook>>>, TError,{data: BodyType<Personalizacione>}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiPersonalizacionHook>>>, TError,{data: BodyType<Personalizacione>}, TContext> => {

const mutationKey = ['postApiPersonalizacion'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      const postApiPersonalizacion =  usePostApiPersonalizacionHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePostApiPersonalizacionHook>>>, {data: BodyType<Personalizacione>}> = (props) => {
          const {data} = props ?? {};

          return  postApiPersonalizacion(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiPersonalizacionMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePostApiPersonalizacionHook>>>>
    export type PostApiPersonalizacionMutationBody = BodyType<Personalizacione>
    export type PostApiPersonalizacionMutationError = ErrorType<unknown>

    export const usePostApiPersonalizacion = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiPersonalizacionHook>>>, TError,{data: BodyType<Personalizacione>}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<ReturnType<typeof usePostApiPersonalizacionHook>>>,
        TError,
        {data: BodyType<Personalizacione>},
        TContext
      > => {

      const mutationOptions = usePostApiPersonalizacionMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    