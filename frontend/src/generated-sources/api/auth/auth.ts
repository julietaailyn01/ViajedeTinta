/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * WebApi
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import {
  useCallback
} from 'react';

import type {
  ConfirmarEmailDto,
  LoginDto,
  RegisterDto,
  VerifyEmailDto
} from '.././model';

import { useCustomInstance } from '.././useCustomInstance';
import type { ErrorType , BodyType } from '.././useCustomInstance';




export const useGetApiAuthMeHook = () => {
        const getApiAuthMe = useCustomInstance<void>();

        return useCallback((
    
 signal?: AbortSignal
) => {
        return getApiAuthMe(
          {url: `/api/Auth/me`, method: 'GET', signal
    },
          );
        }, [getApiAuthMe])
      }
    

export const getGetApiAuthMeQueryKey = () => {
    return [`/api/Auth/me`] as const;
    }

    
export const useGetApiAuthMeQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useGetApiAuthMeHook>>>, TError = ErrorType<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiAuthMeHook>>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiAuthMeQueryKey();

  const getApiAuthMe =  useGetApiAuthMeHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetApiAuthMeHook>>>> = ({ signal }) => getApiAuthMe(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiAuthMeHook>>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiAuthMeQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetApiAuthMeHook>>>>
export type GetApiAuthMeQueryError = ErrorType<unknown>


export function useGetApiAuthMe<TData = Awaited<ReturnType<ReturnType<typeof useGetApiAuthMeHook>>>, TError = ErrorType<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiAuthMeHook>>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetApiAuthMeHook>>>,
          TError,
          Awaited<ReturnType<ReturnType<typeof useGetApiAuthMeHook>>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiAuthMe<TData = Awaited<ReturnType<ReturnType<typeof useGetApiAuthMeHook>>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiAuthMeHook>>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetApiAuthMeHook>>>,
          TError,
          Awaited<ReturnType<ReturnType<typeof useGetApiAuthMeHook>>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiAuthMe<TData = Awaited<ReturnType<ReturnType<typeof useGetApiAuthMeHook>>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiAuthMeHook>>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiAuthMe<TData = Awaited<ReturnType<ReturnType<typeof useGetApiAuthMeHook>>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiAuthMeHook>>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = useGetApiAuthMeQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const usePostApiAuthVerifyHook = () => {
        const postApiAuthVerify = useCustomInstance<void>();

        return useCallback((
    verifyEmailDto: BodyType<VerifyEmailDto>,
 signal?: AbortSignal
) => {
        return postApiAuthVerify(
          {url: `/api/Auth/verify`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: verifyEmailDto, signal
    },
          );
        }, [postApiAuthVerify])
      }
    


export const usePostApiAuthVerifyMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiAuthVerifyHook>>>, TError,{data: BodyType<VerifyEmailDto>}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiAuthVerifyHook>>>, TError,{data: BodyType<VerifyEmailDto>}, TContext> => {

const mutationKey = ['postApiAuthVerify'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      const postApiAuthVerify =  usePostApiAuthVerifyHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePostApiAuthVerifyHook>>>, {data: BodyType<VerifyEmailDto>}> = (props) => {
          const {data} = props ?? {};

          return  postApiAuthVerify(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiAuthVerifyMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePostApiAuthVerifyHook>>>>
    export type PostApiAuthVerifyMutationBody = BodyType<VerifyEmailDto>
    export type PostApiAuthVerifyMutationError = ErrorType<unknown>

    export const usePostApiAuthVerify = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiAuthVerifyHook>>>, TError,{data: BodyType<VerifyEmailDto>}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<ReturnType<typeof usePostApiAuthVerifyHook>>>,
        TError,
        {data: BodyType<VerifyEmailDto>},
        TContext
      > => {

      const mutationOptions = usePostApiAuthVerifyMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const usePostApiAuthLoginHook = () => {
        const postApiAuthLogin = useCustomInstance<void>();

        return useCallback((
    loginDto: BodyType<LoginDto>,
 signal?: AbortSignal
) => {
        return postApiAuthLogin(
          {url: `/api/Auth/login`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: loginDto, signal
    },
          );
        }, [postApiAuthLogin])
      }
    


export const usePostApiAuthLoginMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiAuthLoginHook>>>, TError,{data: BodyType<LoginDto>}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiAuthLoginHook>>>, TError,{data: BodyType<LoginDto>}, TContext> => {

const mutationKey = ['postApiAuthLogin'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      const postApiAuthLogin =  usePostApiAuthLoginHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePostApiAuthLoginHook>>>, {data: BodyType<LoginDto>}> = (props) => {
          const {data} = props ?? {};

          return  postApiAuthLogin(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiAuthLoginMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePostApiAuthLoginHook>>>>
    export type PostApiAuthLoginMutationBody = BodyType<LoginDto>
    export type PostApiAuthLoginMutationError = ErrorType<unknown>

    export const usePostApiAuthLogin = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiAuthLoginHook>>>, TError,{data: BodyType<LoginDto>}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<ReturnType<typeof usePostApiAuthLoginHook>>>,
        TError,
        {data: BodyType<LoginDto>},
        TContext
      > => {

      const mutationOptions = usePostApiAuthLoginMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const usePostApiAuthRegisterHook = () => {
        const postApiAuthRegister = useCustomInstance<void>();

        return useCallback((
    registerDto: BodyType<RegisterDto>,
 signal?: AbortSignal
) => {
        return postApiAuthRegister(
          {url: `/api/Auth/register`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: registerDto, signal
    },
          );
        }, [postApiAuthRegister])
      }
    


export const usePostApiAuthRegisterMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiAuthRegisterHook>>>, TError,{data: BodyType<RegisterDto>}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiAuthRegisterHook>>>, TError,{data: BodyType<RegisterDto>}, TContext> => {

const mutationKey = ['postApiAuthRegister'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      const postApiAuthRegister =  usePostApiAuthRegisterHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePostApiAuthRegisterHook>>>, {data: BodyType<RegisterDto>}> = (props) => {
          const {data} = props ?? {};

          return  postApiAuthRegister(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiAuthRegisterMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePostApiAuthRegisterHook>>>>
    export type PostApiAuthRegisterMutationBody = BodyType<RegisterDto>
    export type PostApiAuthRegisterMutationError = ErrorType<unknown>

    export const usePostApiAuthRegister = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiAuthRegisterHook>>>, TError,{data: BodyType<RegisterDto>}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<ReturnType<typeof usePostApiAuthRegisterHook>>>,
        TError,
        {data: BodyType<RegisterDto>},
        TContext
      > => {

      const mutationOptions = usePostApiAuthRegisterMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const usePostApiAuthConfirmarEmailHook = () => {
        const postApiAuthConfirmarEmail = useCustomInstance<void>();

        return useCallback((
    confirmarEmailDto: BodyType<ConfirmarEmailDto>,
 signal?: AbortSignal
) => {
        return postApiAuthConfirmarEmail(
          {url: `/api/Auth/confirmar-email`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: confirmarEmailDto, signal
    },
          );
        }, [postApiAuthConfirmarEmail])
      }
    


export const usePostApiAuthConfirmarEmailMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiAuthConfirmarEmailHook>>>, TError,{data: BodyType<ConfirmarEmailDto>}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiAuthConfirmarEmailHook>>>, TError,{data: BodyType<ConfirmarEmailDto>}, TContext> => {

const mutationKey = ['postApiAuthConfirmarEmail'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      const postApiAuthConfirmarEmail =  usePostApiAuthConfirmarEmailHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePostApiAuthConfirmarEmailHook>>>, {data: BodyType<ConfirmarEmailDto>}> = (props) => {
          const {data} = props ?? {};

          return  postApiAuthConfirmarEmail(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiAuthConfirmarEmailMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePostApiAuthConfirmarEmailHook>>>>
    export type PostApiAuthConfirmarEmailMutationBody = BodyType<ConfirmarEmailDto>
    export type PostApiAuthConfirmarEmailMutationError = ErrorType<unknown>

    export const usePostApiAuthConfirmarEmail = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiAuthConfirmarEmailHook>>>, TError,{data: BodyType<ConfirmarEmailDto>}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<ReturnType<typeof usePostApiAuthConfirmarEmailHook>>>,
        TError,
        {data: BodyType<ConfirmarEmailDto>},
        TContext
      > => {

      const mutationOptions = usePostApiAuthConfirmarEmailMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    