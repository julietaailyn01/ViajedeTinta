/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * WebApi
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import {
  useCallback
} from 'react';

import type {
  Producto
} from '.././model';

import { useCustomInstance } from '.././useCustomInstance';
import type { ErrorType , BodyType } from '.././useCustomInstance';




export const useGetApiProductHook = () => {
        const getApiProduct = useCustomInstance<Producto[]>();

        return useCallback((
    
 signal?: AbortSignal
) => {
        return getApiProduct(
          {url: `/api/Product`, method: 'GET', signal
    },
          );
        }, [getApiProduct])
      }
    

export const getGetApiProductQueryKey = () => {
    return [`/api/Product`] as const;
    }

    
export const useGetApiProductQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useGetApiProductHook>>>, TError = ErrorType<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiProductHook>>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiProductQueryKey();

  const getApiProduct =  useGetApiProductHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetApiProductHook>>>> = ({ signal }) => getApiProduct(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiProductHook>>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiProductQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetApiProductHook>>>>
export type GetApiProductQueryError = ErrorType<unknown>


export function useGetApiProduct<TData = Awaited<ReturnType<ReturnType<typeof useGetApiProductHook>>>, TError = ErrorType<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiProductHook>>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetApiProductHook>>>,
          TError,
          Awaited<ReturnType<ReturnType<typeof useGetApiProductHook>>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiProduct<TData = Awaited<ReturnType<ReturnType<typeof useGetApiProductHook>>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiProductHook>>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetApiProductHook>>>,
          TError,
          Awaited<ReturnType<ReturnType<typeof useGetApiProductHook>>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiProduct<TData = Awaited<ReturnType<ReturnType<typeof useGetApiProductHook>>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiProductHook>>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiProduct<TData = Awaited<ReturnType<ReturnType<typeof useGetApiProductHook>>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiProductHook>>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = useGetApiProductQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const usePostApiProductHook = () => {
        const postApiProduct = useCustomInstance<Producto>();

        return useCallback((
    producto: BodyType<Producto>,
 signal?: AbortSignal
) => {
        return postApiProduct(
          {url: `/api/Product`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: producto, signal
    },
          );
        }, [postApiProduct])
      }
    


export const usePostApiProductMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiProductHook>>>, TError,{data: BodyType<Producto>}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiProductHook>>>, TError,{data: BodyType<Producto>}, TContext> => {

const mutationKey = ['postApiProduct'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      const postApiProduct =  usePostApiProductHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePostApiProductHook>>>, {data: BodyType<Producto>}> = (props) => {
          const {data} = props ?? {};

          return  postApiProduct(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiProductMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePostApiProductHook>>>>
    export type PostApiProductMutationBody = BodyType<Producto>
    export type PostApiProductMutationError = ErrorType<unknown>

    export const usePostApiProduct = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiProductHook>>>, TError,{data: BodyType<Producto>}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<ReturnType<typeof usePostApiProductHook>>>,
        TError,
        {data: BodyType<Producto>},
        TContext
      > => {

      const mutationOptions = usePostApiProductMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const useGetApiProductIdHook = () => {
        const getApiProductId = useCustomInstance<Producto>();

        return useCallback((
    id: number,
 signal?: AbortSignal
) => {
        return getApiProductId(
          {url: `/api/Product/${id}`, method: 'GET', signal
    },
          );
        }, [getApiProductId])
      }
    

export const getGetApiProductIdQueryKey = (id: number,) => {
    return [`/api/Product/${id}`] as const;
    }

    
export const useGetApiProductIdQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useGetApiProductIdHook>>>, TError = ErrorType<unknown>>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiProductIdHook>>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiProductIdQueryKey(id);

  const getApiProductId =  useGetApiProductIdHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetApiProductIdHook>>>> = ({ signal }) => getApiProductId(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiProductIdHook>>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiProductIdQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetApiProductIdHook>>>>
export type GetApiProductIdQueryError = ErrorType<unknown>


export function useGetApiProductId<TData = Awaited<ReturnType<ReturnType<typeof useGetApiProductIdHook>>>, TError = ErrorType<unknown>>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiProductIdHook>>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetApiProductIdHook>>>,
          TError,
          Awaited<ReturnType<ReturnType<typeof useGetApiProductIdHook>>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiProductId<TData = Awaited<ReturnType<ReturnType<typeof useGetApiProductIdHook>>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiProductIdHook>>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetApiProductIdHook>>>,
          TError,
          Awaited<ReturnType<ReturnType<typeof useGetApiProductIdHook>>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiProductId<TData = Awaited<ReturnType<ReturnType<typeof useGetApiProductIdHook>>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiProductIdHook>>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiProductId<TData = Awaited<ReturnType<ReturnType<typeof useGetApiProductIdHook>>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiProductIdHook>>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = useGetApiProductIdQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const usePutApiProductIdHook = () => {
        const putApiProductId = useCustomInstance<void>();

        return useCallback((
    id: number,
    producto: BodyType<Producto>,
 ) => {
        return putApiProductId(
          {url: `/api/Product/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: producto
    },
          );
        }, [putApiProductId])
      }
    


export const usePutApiProductIdMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePutApiProductIdHook>>>, TError,{id: number;data: BodyType<Producto>}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePutApiProductIdHook>>>, TError,{id: number;data: BodyType<Producto>}, TContext> => {

const mutationKey = ['putApiProductId'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      const putApiProductId =  usePutApiProductIdHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePutApiProductIdHook>>>, {id: number;data: BodyType<Producto>}> = (props) => {
          const {id,data} = props ?? {};

          return  putApiProductId(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutApiProductIdMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePutApiProductIdHook>>>>
    export type PutApiProductIdMutationBody = BodyType<Producto>
    export type PutApiProductIdMutationError = ErrorType<unknown>

    export const usePutApiProductId = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePutApiProductIdHook>>>, TError,{id: number;data: BodyType<Producto>}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<ReturnType<typeof usePutApiProductIdHook>>>,
        TError,
        {id: number;data: BodyType<Producto>},
        TContext
      > => {

      const mutationOptions = usePutApiProductIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const useDeleteApiProductIdHook = () => {
        const deleteApiProductId = useCustomInstance<void>();

        return useCallback((
    id: number,
 ) => {
        return deleteApiProductId(
          {url: `/api/Product/${id}`, method: 'DELETE'
    },
          );
        }, [deleteApiProductId])
      }
    


export const useDeleteApiProductIdMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDeleteApiProductIdHook>>>, TError,{id: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDeleteApiProductIdHook>>>, TError,{id: number}, TContext> => {

const mutationKey = ['deleteApiProductId'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      const deleteApiProductId =  useDeleteApiProductIdHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useDeleteApiProductIdHook>>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteApiProductId(id,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiProductIdMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useDeleteApiProductIdHook>>>>
    
    export type DeleteApiProductIdMutationError = ErrorType<unknown>

    export const useDeleteApiProductId = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDeleteApiProductIdHook>>>, TError,{id: number}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<ReturnType<typeof useDeleteApiProductIdHook>>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = useDeleteApiProductIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    