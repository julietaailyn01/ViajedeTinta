/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * WebApi
 * OpenAPI spec version: 1.0
 */
import {
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import {
  useCallback
} from 'react';

import type {
  Usuario
} from '.././model';

import { useCustomInstance } from '.././useCustomInstance';
import type { ErrorType } from '.././useCustomInstance';




export const useGetApiUsuarioHook = () => {
        const getApiUsuario = useCustomInstance<Usuario[]>();

        return useCallback((
    
 signal?: AbortSignal
) => {
        return getApiUsuario(
          {url: `/api/Usuario`, method: 'GET', signal
    },
          );
        }, [getApiUsuario])
      }
    

export const getGetApiUsuarioQueryKey = () => {
    return [`/api/Usuario`] as const;
    }

    
export const useGetApiUsuarioQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useGetApiUsuarioHook>>>, TError = ErrorType<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiUsuarioHook>>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiUsuarioQueryKey();

  const getApiUsuario =  useGetApiUsuarioHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetApiUsuarioHook>>>> = ({ signal }) => getApiUsuario(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiUsuarioHook>>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiUsuarioQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetApiUsuarioHook>>>>
export type GetApiUsuarioQueryError = ErrorType<unknown>


export function useGetApiUsuario<TData = Awaited<ReturnType<ReturnType<typeof useGetApiUsuarioHook>>>, TError = ErrorType<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiUsuarioHook>>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetApiUsuarioHook>>>,
          TError,
          Awaited<ReturnType<ReturnType<typeof useGetApiUsuarioHook>>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiUsuario<TData = Awaited<ReturnType<ReturnType<typeof useGetApiUsuarioHook>>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiUsuarioHook>>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetApiUsuarioHook>>>,
          TError,
          Awaited<ReturnType<ReturnType<typeof useGetApiUsuarioHook>>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiUsuario<TData = Awaited<ReturnType<ReturnType<typeof useGetApiUsuarioHook>>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiUsuarioHook>>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiUsuario<TData = Awaited<ReturnType<ReturnType<typeof useGetApiUsuarioHook>>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiUsuarioHook>>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = useGetApiUsuarioQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const useGetApiUsuarioIdHook = () => {
        const getApiUsuarioId = useCustomInstance<Usuario>();

        return useCallback((
    id: number,
 signal?: AbortSignal
) => {
        return getApiUsuarioId(
          {url: `/api/Usuario/${id}`, method: 'GET', signal
    },
          );
        }, [getApiUsuarioId])
      }
    

export const getGetApiUsuarioIdQueryKey = (id: number,) => {
    return [`/api/Usuario/${id}`] as const;
    }

    
export const useGetApiUsuarioIdQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useGetApiUsuarioIdHook>>>, TError = ErrorType<unknown>>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiUsuarioIdHook>>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiUsuarioIdQueryKey(id);

  const getApiUsuarioId =  useGetApiUsuarioIdHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetApiUsuarioIdHook>>>> = ({ signal }) => getApiUsuarioId(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiUsuarioIdHook>>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiUsuarioIdQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetApiUsuarioIdHook>>>>
export type GetApiUsuarioIdQueryError = ErrorType<unknown>


export function useGetApiUsuarioId<TData = Awaited<ReturnType<ReturnType<typeof useGetApiUsuarioIdHook>>>, TError = ErrorType<unknown>>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiUsuarioIdHook>>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetApiUsuarioIdHook>>>,
          TError,
          Awaited<ReturnType<ReturnType<typeof useGetApiUsuarioIdHook>>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiUsuarioId<TData = Awaited<ReturnType<ReturnType<typeof useGetApiUsuarioIdHook>>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiUsuarioIdHook>>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetApiUsuarioIdHook>>>,
          TError,
          Awaited<ReturnType<ReturnType<typeof useGetApiUsuarioIdHook>>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiUsuarioId<TData = Awaited<ReturnType<ReturnType<typeof useGetApiUsuarioIdHook>>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiUsuarioIdHook>>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiUsuarioId<TData = Awaited<ReturnType<ReturnType<typeof useGetApiUsuarioIdHook>>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiUsuarioIdHook>>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = useGetApiUsuarioIdQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



